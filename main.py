import ai
import telebot
from pyexpat.errors import messages
from telebot import types
import logging
import os
from dotenv import load_dotenv
import database as db
import  qpt

load_dotenv()
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


user_states = {}

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):

    #–ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–∞ –≤ –ë–î
    rez = db.create_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
    if rez.error_code ==3 :
        return bot.send_message(message.chat.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

    rez1 = db.save_chat(message.chat.id, message.from_user.id)
    if rez.error_code ==3:
        return bot.send_message(message.chat.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    # –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–∞ –≤ –ë–î

    user = message.from_user
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç–∏–∫ –∫–æ—Ç–∏–∫.\n–í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    bot.reply_to(message, welcome_text)

    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üîÆ –†–µ–∂–∏–º –ò–ò GigaChat SBER")
    btn2 = types.KeyboardButton("üîÆ –†–µ–∂–∏–º –ò–ò GPT 4 Mini")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

–¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏!
"""
    bot.reply_to(message, help_text)


@bot.message_handler(func = lambda message:  "üîÆ –†–µ–∂–∏–º –ò–ò" in message.text)
def enable_ai_mode(message):
    if message.text == "üîÆ –†–µ–∂–∏–º –ò–ò GigaChat SBER":
        user_states[message.chat.id] =  {"ai_mode_sber": True}
    elif message.text == "üîÆ –†–µ–∂–∏–º –ò–ò GPT 4 Mini":
        user_states[message.chat.id] = {"ai_mode_qpt": True}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_exit = types.KeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò")
    markup.add(btn_exit)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:", reply_markup=markup)


@bot.message_handler(func = lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò")
def exit_ai_mode(message):
    if message.chat.id in user_states:
        del user_states[message.chat.id]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üîÆ –†–µ–∂–∏–º –ò–ò GigaChat SBER")
    btn2 = types.KeyboardButton("üîÆ –†–µ–∂–∏–º –ò–ò GPT 4 Mini")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id,
                     "–†–µ–∂–∏–º –ò–ò –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                     reply_markup=markup)

@bot.message_handler(func= lambda message:message.chat.id in user_states and user_states[message.chat.id].get('ai_mode_sber'))
def get_ai_answer_sber(message):

    answer = ai.ask_gigachat(message.chat.id, message.text)
    if answer is False:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ò–ò")
        return

    bot.send_message(message.chat.id, answer)


@bot.message_handler(func= lambda message:message.chat.id in user_states and user_states[message.chat.id].get('ai_mode_qpt'))
def get_ai_answer_qpt(message):

    answer = qpt.ask_qpt(message.chat.id, message.text)
    if answer["result"] is False:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ò–ò")
        return

    bot.send_message(message.chat.id, answer["answer"])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    rez = db.save_massage(message.id, message.from_user.id, message.date, message.text)
    if rez.result is False:
        return bot.send_message(message.chat.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")


    else:
        bot.send_message(message.chat.id, f"–ú—è—É")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@bot.message_handler(func=lambda message: True)
def error_handler(message):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()